using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MonsterPoolManager : Singleton<MonsterPoolManager>
{
    public GameObject[] objectPrefabs;

    [SerializeField]
    private int poolSize = 10;

    //private Queue<GameObject> pool = new Queue<GameObject>();
    private Dictionary<int, Queue<GameObject>> pool = new Dictionary<int, Queue<GameObject>>();

    GameObject poolParent;

    
    protected override void Awake()
    {
        base.Awake();
        objectPrefabs = Resources.LoadAll<GameObject>("Prefabs/Entity/Enemy");
        pool[0] = new Queue<GameObject>();
        pool[1] = new Queue<GameObject>();
        pool[2] = new Queue<GameObject>();

    }

    void Start()
    {
        // ????????????????Β?ル윲??????釉랁닑???롪퍓媛???????ш끽維뽳쭩???
        for (int j = 0; j < objectPrefabs.Length; j++)
        {
            for (int i = 0; i < poolSize; i++)
            {
                GameObject obj = Instantiate(objectPrefabs[j]);
                int temp = j;
                obj.GetComponent<EnemyStat>().OnDie += () => ReturnObject(obj, temp);
                obj.SetActive(false);  // ????????????Β?ル윲???????????롮쾸?椰???
                obj.transform.SetParent(gameObject.transform);
                pool[j].Enqueue(obj);  // ?????????????癲ル슢???㏓뙀?
            }
        }
    }


    // ???????????????????Β?ル윲????????ル뒌????饔낅떽?????嶺뚮ㅎ?닺짆???????
    public GameObject GetObject(int index)
    {
        GameManager.Instance.EnemyCounting(1);
        if (pool[index].Count > 0)
        {
            GameObject obj = pool[index].Dequeue();  // ??????????????????Β?ル윲?????黎앸럽??筌뚭퍏?????????????뭽??????????
            obj.SetActive(true);  // ????????????Β?ル윲?????????
            return obj;
        }
        else
        {
            // ?????獄쏅챶留???????????????????Β?ル윲???????嚥싲갭큔?琉몃쨨??????????????꾨굴??
            GameObject obj = Instantiate(objectPrefabs[index]);
            return obj;
        }
    }

    // ????????轅붽틓??????????????????Β?ル윲????????????밸븶筌믩끃??????黎앸럽????룸돥?????????
    public void ReturnObject(GameObject obj, int index)
    {
        GameManager.Instance.EnemyCounting(-1);
        if (AchievementManager.Instance.goalKillCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] > AchievementManager.Instance.killCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)])
        {
            AchievementManager.Instance.killCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] = AchievementManager.Instance.killCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] + 1;
        }

        if(!AchievementManager.Instance.currentKillCnt.ContainsKey(obj.name.Substring(0, obj.name.Length - "(Clone)".Length)))
        {
            AchievementManager.Instance.currentKillCnt.Add(obj.name.Substring(0, obj.name.Length - "(Clone)".Length), 1);
        }
        else
        {
            AchievementManager.Instance.currentKillCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] += 1;
        }


        obj.SetActive(false);  // ????????????Β?ル윲???????????롮쾸?椰???
        pool[index].Enqueue(obj);  // ?????????밸븶筌믩끃????
    }
}
