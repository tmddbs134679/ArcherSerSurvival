using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MonsterPoolManager : Singleton<MonsterPoolManager>
{
    public GameObject[] objectPrefabs;

    [SerializeField]
    private int poolSize = 10;

    //private Queue<GameObject> pool = new Queue<GameObject>();
    private Dictionary<int, Queue<GameObject>> pool = new Dictionary<int, Queue<GameObject>>();

    GameObject poolParent;

    
    protected override void Awake()
    {
        base.Awake();
        objectPrefabs = Resources.LoadAll<GameObject>("Prefabs/Entity/Enemy");
        pool[0] = new Queue<GameObject>();
        pool[1] = new Queue<GameObject>();
        pool[2] = new Queue<GameObject>();

    }

    void Start()
    {
        // ??????????????????????紐????????怨쀫엥?????β뼯援?癒⑸쨬??????????諛몃마嶺뚮??????
        for (int j = 0; j < objectPrefabs.Length; j++)
        {
            for (int i = 0; i < poolSize; i++)
            {
                GameObject obj = Instantiate(objectPrefabs[j]);
                int temp = j;
                //obj.GetComponent<EnemyStat>().OnDie += () => ReturnObject(obj, temp);
                obj.SetActive(false);  // ??????????????????紐????????????????????
                obj.transform.SetParent(gameObject.transform);
                pool[j].Enqueue(obj);  // ??????????????饔낅떽??????癰??
            }
        }
    }


    // ?????????????????????????紐???????????????????븐뼐????????轅붽틓?????됰Ŋ異???????
    public GameObject GetObject(int index)
    {
        GameManager.Instance.EnemyCounting(1);
        if (pool[index].Count > 0)
        {
            GameObject obj = pool[index].Dequeue();  // ????????????????????????紐???????留⑶뜮????꿔꺂???????????????????????????
            obj.SetActive(true);  // ??????????????????紐?????????
            return obj;
        }
        else
        {
            // ??????熬곣뫖利당춯??쎾퐲?????????????????????????紐???????????롮쾸?椰?癲ル슢??㎖?밤뀋???????????????ш끽紐???
            GameObject obj = Instantiate(objectPrefabs[index]);
            return obj;
        }
    }

    // ?????????遺얘턁??????????????????????????紐?????????????꾩룆梨띰쭕?뚢뵾???????????留⑶뜮??????猷몄굡??????????
    public void ReturnObject(GameObject obj, int index)
    {
        GameManager.Instance.EnemyCounting(-1);

        //??λ쳛???袁⑤콦 > ?熬곣뫗???곸궠????

        if (AchievementManager.Instance.goalKillCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] > AchievementManager.Instance.killCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)])
        {
            AchievementManager.Instance.killCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] = AchievementManager.Instance.killCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] + 1;

            if (AchievementManager.Instance.achievementFlag[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] == false)
            {
                if (AchievementManager.Instance.killCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] == AchievementManager.Instance.goalKillCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)])
                {
                    //??놁읅UI ?紐꾪뀱?紐껊쑓 ??已??野껊????
                    AchievementManager.Instance.currentKey = obj.name.Substring(0, obj.name.Length - "(Clone)".Length);
                    UIManager.Instance.ShowUI("AchievementEvent");
                }


            }
        
        }

        if(!AchievementManager.Instance.currentKillCnt.ContainsKey(obj.name.Substring(0, obj.name.Length - "(Clone)".Length)))
        {
            AchievementManager.Instance.currentKillCnt.Add(obj.name.Substring(0, obj.name.Length - "(Clone)".Length), 1);
        }
        else
        {
            AchievementManager.Instance.currentKillCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] += 1;
        }



        obj.SetActive(false);  // ??????????????????紐????????????????????
        pool[index].Enqueue(obj);  // ??????????꾩룆梨띰쭕?뚢뵾???????
    }
}
