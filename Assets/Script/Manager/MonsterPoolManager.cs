using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MonsterPoolManager : Singleton<MonsterPoolManager>
{
    public GameObject[] objectPrefabs;
    public Dictionary<string, GameObject> objectPrefabsDic = new Dictionary<string, GameObject>();

    [SerializeField]
    private int poolSize = 10;

    //private Queue<GameObject> pool = new Queue<GameObject>();
    private Dictionary<string, Queue<GameObject>> pool = new Dictionary<string, Queue<GameObject>>();

    GameObject poolParent;

    
    protected override void Awake()
    {
        base.Awake();

        var enemies = Resources.LoadAll<GameObject>("Prefabs/Entity/Enemy");
        var bosses = Resources.LoadAll<GameObject>("Prefabs/Entity/Boss");

        objectPrefabs = new GameObject[enemies.Length + bosses.Length];
        enemies.CopyTo(objectPrefabs, 0);
        bosses.CopyTo(objectPrefabs, enemies.Length);


        foreach(var obj in objectPrefabs)
        {
            objectPrefabsDic.Add(obj.name, obj);
            pool[obj.name] = new Queue<GameObject>();
        }


        /*
        pool[0] = new Queue<GameObject>();
        pool[1] = new Queue<GameObject>();
        pool[2] = new Queue<GameObject>();
        */
    }

    void Start()
    {
        // ???????????????????????????????????????????癲됱빖???嶺??亦껋꼷伊볡댚?쒗닧???????????熬곣뫖利당춯??쎾퐲???????????

        //포이치
        foreach(var key in objectPrefabsDic.Keys)
        {
            for (int i = 0; i < poolSize; i++)
            {
                GameObject obj = Instantiate(objectPrefabsDic[key]);
                //obj.GetComponent<EnemyStat>().OnDie += () => ReturnObject(obj, temp);
                obj.SetActive(false);  // ???????????????????????????????????????
                obj.transform.SetParent(gameObject.transform);
                pool[key].Enqueue(obj);  // ?????????????????釉먮폁???????????
            }
        }

    }


    // ???????????????????????????????????????????????嫄????????????븐뼐?????????濾곌쑨?↓걡釉낅쑏???????
    public GameObject GetObject(string key)
    {
        GameManager.Instance.EnemyCounting(1);
        if (pool[key].Count > 0)
        {
            GameObject obj = pool[key].Dequeue();  // ??????????????????????????????????꿔꺂???⑸븶??????遺얘턁?????????????????????????????
            obj.SetActive(true);  // ????????????????????????????
            return obj;
        }
        else
        {
            // ??????????諛몃마嶺뚮?????????????硫λ젒?????????????????????????????????????????????耀붾굝????????袁⑸젽??????????????????????됰뼸???
            GameObject obj = Instantiate(objectPrefabsDic[key]);
            return obj;
        }
    }

    // ?????????????거?????????????????????????????????????????????썹땟戮녹??諭?????⑸㎦?????????????????꿔꺂???⑸븶?????????猷몄굣????????????
    public void ReturnObject(GameObject obj, string key)
    {
        GameManager.Instance.EnemyCounting(-1);

        //??潁뺛깾???????썹땟???> ?????밸븶?????ㅳ늾?????

        if (AchievementManager.Instance.achievementEvent.ContainsKey(obj.name.Substring(0, obj.name.Length - "(Clone)".Length)))
        {
            if (AchievementManager.Instance.goalKillCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] > AchievementManager.Instance.killCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)])
            {
                AchievementManager.Instance.killCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] = AchievementManager.Instance.killCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] + 1;

                if (AchievementManager.Instance.achievementFlag[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] == false)
                {
                    if (AchievementManager.Instance.killCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] == AchievementManager.Instance.goalKillCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)])
                    {
                        //????⑤챷諭푎I ?癲ル슢????癲ル슢???????????嚥▲굧?????
                        AchievementManager.Instance.currentKey = obj.name.Substring(0, obj.name.Length - "(Clone)".Length);
                        UIManager.Instance.ShowUI("AchievementEvent");
                    }


                }

            }
        }

        if (!AchievementManager.Instance.currentKillCnt.ContainsKey(obj.name.Substring(0, obj.name.Length - "(Clone)".Length)))
        {
            AchievementManager.Instance.currentKillCnt.Add(obj.name.Substring(0, obj.name.Length - "(Clone)".Length), 1);
        }
        else
        {
            AchievementManager.Instance.currentKillCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] += 1;
        }


        obj.gameObject.GetComponent<BoxCollider2D>().enabled = true;
        obj.SetActive(false);  // ??????????????????癲????????????????????
        pool[key].Enqueue(obj);  // ???????????ш끽維뽳쭩?뱀땡???얩맪???????????
    }
}
