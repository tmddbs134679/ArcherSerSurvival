using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public class MonsterPoolManager : Singleton<MonsterPoolManager>
{
    public GameObject[] objectPrefabs;
    public Dictionary<string, GameObject> objectPrefabsDic = new Dictionary<string, GameObject>();

    [SerializeField]
    private int poolSize = 10;

    //private Queue<GameObject> pool = new Queue<GameObject>();
    private Dictionary<string, Queue<GameObject>> pool = new Dictionary<string, Queue<GameObject>>();

    GameObject poolParent;

    
    protected override void Awake()
    {
        base.Awake();

        var enemies = Resources.LoadAll<GameObject>("Prefabs/Entity/Enemy");
        var bosses = Resources.LoadAll<GameObject>("Prefabs/Entity/Boss");

        objectPrefabs = new GameObject[enemies.Length + bosses.Length];
        enemies.CopyTo(objectPrefabs, 0);
        bosses.CopyTo(objectPrefabs, enemies.Length);


        foreach(var obj in objectPrefabs)
        {
            objectPrefabsDic.Add(obj.name, obj);
            pool[obj.name] = new Queue<GameObject>();
        }


        /*
        pool[0] = new Queue<GameObject>();
        pool[1] = new Queue<GameObject>();
        pool[2] = new Queue<GameObject>();
        */
    }

    void Start()
    {
        // ????????????????????????????????????????????뀀맩鍮???癲??雅?퍔瑗룝펺蹂〓뙕??쀫떑????????????ш끽維뽳쭩?뱀땡???얩맪???????????

        //?ъ씠移?
        foreach(var key in objectPrefabsDic.Keys)
        {
            for (int i = 0; i < poolSize; i++)
            {
                GameObject obj = Instantiate(objectPrefabsDic[key]);
                //obj.GetComponent<EnemyStat>().OnDie += () => ReturnObject(obj, temp);
                obj.SetActive(false);  // ???????????????????????????????????????
                obj.transform.SetParent(gameObject.transform);
                pool[key].Enqueue(obj);  // ??????????????????됰Ŧ????????????
            }
        }

    }


    // ???????????????????????????????????????????????椰????????????釉먮폁?????????癲꾧퀗???볤괌?됰굝????????
    public GameObject GetObject(string key)
    {
        GameManager.Instance.EnemyCounting(1);
        if (pool[key].Count > 0)
        {
            GameObject obj = pool[key].Dequeue();  // ??????????????????????????????????轅붽틓????몃마????????븐뼐??????????????????????????????
            obj.SetActive(true);  // ????????????????????????????
            return obj;
        }
        else
        {
            // ??????????獄쏅챶留덌┼??????????????筌롈살젔??????????????????????????????????????????????遺얘턁????????熬곣뫖????????????????????????곕섯???
            GameObject obj = Instantiate(objectPrefabsDic[key]);
            return obj;
        }
    }

    public GameObject GetRandomObject()
    {
        GameManager.Instance.EnemyCounting(1);

        List<string> keyList = new List<string>();

        foreach (var key in pool.Keys)
        {
            if (key.Equals("Ogre"))
            {
                
            }
            else
            {
                keyList.Add(key);
            }
        }

        foreach(var tempp in keyList)
        {
            Debug.Log(tempp);
        }
        string tempKey = keyList[Random.RandomRange(0, keyList.Count)];

        if (pool[tempKey].Count > 0)
        {
            GameObject obj = pool[tempKey].Dequeue();  // ??????????????????????????????????轅붽틓????몃마????????븐뼐??????????????????????????????
            obj.SetActive(true);  // ????????????????????????????
            return obj;
        }
        else
        {
            // ??????????獄쏅챶留덌┼??????????????筌롈살젔??????????????????????????????????????????????遺얘턁????????熬곣뫖????????????????????????곕섯???
            GameObject obj = Instantiate(objectPrefabsDic[tempKey]);
            return obj;
        }
    }

    public GameObject GetRandomBossObject()
    {
        GameManager.Instance.EnemyCounting(1);

        List<string> keyList = new List<string>();

        foreach (var key in pool.Keys)
        {
            if (key == "Ogre")
            {
                keyList.Add(key);
            }
        }


        string tempKey = keyList[Random.RandomRange(0, keyList.Count)];

        if (pool[tempKey].Count > 0)
        {
            GameObject obj = pool[tempKey].Dequeue();  // ??????????????????????????????????轅붽틓????몃마????????븐뼐??????????????????????????????
            obj.SetActive(true);  // ????????????????????????????
            return obj;
        }
        else
        {
            // ??????????獄쏅챶留덌┼??????????????筌롈살젔??????????????????????????????????????????????遺얘턁????????熬곣뫖????????????????????????곕섯???
            GameObject obj = Instantiate(objectPrefabsDic[tempKey]);
            return obj;
        }
    }

    public void AllObjectOff()
    {
        //???뗣뀑 諛뽰쓣 媛?몄??쇱? ?뗣뀑



        foreach(Transform child in gameObject.transform)
        {
            child.gameObject.SetActive(false);
            pool[child.gameObject.name.Substring(0, child.gameObject.name.Length - "(Clone)".Length)].Enqueue(child.gameObject);
        }

    }

// ?????????????嫄??????????????????????????????????????????????밸븶筌믩끃??獄???????멥렑?????????????????轅붽틓????몃마??????????룸챷援????????????
public void ReturnObject(GameObject obj, string key)
    {
        GameManager.Instance.EnemyCounting(-1);

        //??逆곷틳源????????밸븶???> ?????諛몃마??????노듋?????

        if (AchievementManager.Instance.achievementEvent.ContainsKey(obj.name.Substring(0, obj.name.Length - "(Clone)".Length)))
        {
            if (AchievementManager.Instance.goalKillCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] > AchievementManager.Instance.killCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)])
            {
                AchievementManager.Instance.killCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] = AchievementManager.Instance.killCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] + 1;

                if (AchievementManager.Instance.achievementFlag[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] == false)
                {
                    if (AchievementManager.Instance.killCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] == AchievementManager.Instance.goalKillCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)])
                    {
                        //?????ㅼ굣獄?몠I ??꿔꺂??????꿔꺂?????????????β뼯援?????
                        AchievementManager.Instance.currentKey = obj.name.Substring(0, obj.name.Length - "(Clone)".Length);
                        UIManager.Instance.ShowUI("AchievementEvent");
                    }


                }

            }
        }

        if (!AchievementManager.Instance.currentKillCnt.ContainsKey(obj.name.Substring(0, obj.name.Length - "(Clone)".Length)))
        {
            AchievementManager.Instance.currentKillCnt.Add(obj.name.Substring(0, obj.name.Length - "(Clone)".Length), 1);
        }
        else
        {
            AchievementManager.Instance.currentKillCnt[obj.name.Substring(0, obj.name.Length - "(Clone)".Length)] += 1;
        }


        obj.gameObject.GetComponent<BoxCollider2D>().enabled = true;
        obj.SetActive(false);  // ???????????????????????????????????????
        pool[key].Enqueue(obj);  // ?????????????썹땟戮녹??諭?????⑸㎦???????????
    }
}
